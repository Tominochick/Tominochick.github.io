<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>&#39;爬虫下载b站视频&#39;</title>
    <url>/2020/04/28/%E7%88%AC%E8%99%AB%E4%B8%8B%E8%BD%BDb%E7%AB%99%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<p>自己练习网上抓东西。<br><br><br>实现功能：检索、下载b站<strong>非会员</strong>视频。<br><br>核心部分：对b站公共api的使用，也让我对什么是api有了一定的了解。<br><br>程序设计思路：获得bvid→获得cid→获得视频url→下载flv<br><br>感想：不知道为什么，感觉这都是一些表面的东西，没什么实质的技术含量，也许是自己现在还比较菜，也算是基础入门吧。<br><br>难点： <strong>正则表达式</strong>的使用，这也是我觉得比较难的地方吧。我也想过用beautifulsoup4，尝试了一下放弃了，因为bs4还是要用到正则（主要是我还没学透），<br><br><br>&emsp;&emsp;之后我会更多的投入到大学基础课程的学习。啊！俺的高数，啊！俺的English，俺来啦~<br><br>正文：写这篇文章主要是想总结一下，一些难点，心得。<br><br>感谢：Bilibili ORZ</p>
<a id="more"></a>
<h1 id="1、资源获取"><a href="#1、资源获取" class="headerlink" title="1、资源获取"></a>1、资源获取<br></h1><p>&emsp;b站对视频资源设计是有了bvid（avid）视频ID和cvid视频分段ID（就是“自古2p没人看的‘p’ ”）就能从b站api获取视频url，用这个url就能从b站服务器下载视频。<br><br></p>
<h2 id="1-1-获得bvid"><a href="#1-1-获得bvid" class="headerlink" title="1.1 获得bvid"></a><strong>1.1 获得bvid</strong><br></h2><p>从b站的search服务器网站’<a href="https://search.bilibili.com/all?keyword=&#39;" target="_blank" rel="noopener">https://search.bilibili.com/all?keyword=&#39;</a><br><br>‘keyword=’在后面加上想要搜索的名称<br><br>就能得到索引<a href="https://baike.baidu.com/item/HTML/97049?fr=aladdin" target="_blank" rel="noopener">html</a>文档。用正则表达式提取文档中bvid、视频名字和该视频的url（以后headers头中referer要用，防止反爬）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pattern = compile(<span class="string">'&lt;a href="//www.bilibili.com(.*)" title="(.*?)" '</span>)<span class="comment"># 获取Bvid、视频名字</span></span><br><span class="line">data = re.findall(patten, html)<span class="comment"># 正则匹配 </span></span><br><span class="line"></span><br><span class="line">list = []<span class="comment"># 用来保存由 序号、名字、bvid、referer构成的字典1</span></span><br><span class="line">        i = <span class="number">0</span> </span><br><span class="line">        <span class="keyword">for</span> ul, name <span class="keyword">in</span> data:</span><br><span class="line">            dict = &#123;<span class="string">'number'</span>: <span class="string">''</span>, <span class="string">'name'</span>: <span class="string">''</span>, <span class="string">'bvid'</span>: <span class="string">''</span>, <span class="string">'referer'</span>: <span class="string">''</span>&#125;</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            referer = <span class="string">'http://www.bilibili.com'</span> + ul</span><br><span class="line">            bvid = re.findall(<span class="string">'/([a-zA-Z0-9]*)\?'</span>, ul)[<span class="number">0</span>]</span><br><span class="line">            dict[<span class="string">'number'</span>] = i</span><br><span class="line">            dict[<span class="string">'name'</span>] = name</span><br><span class="line">            dict[<span class="string">'bvid'</span>] = bvid</span><br><span class="line">            dict[<span class="string">'referer'</span>] = referer</span><br><span class="line">            list.append(dict)</span><br><span class="line">        path = savefile.save(name=s_name, dirpath=root_dir, content=list, suffix=<span class="string">'json'</span>)</span><br><span class="line">        <span class="comment"># 我为了更好的测试，将每一步的结果都保存了起来，这个savefile函数是我自己写的。</span></span><br></pre></td></tr></table></figure>
<h2 id="1-2获取cid"><a href="#1-2获取cid" class="headerlink" title="1.2获取cid"></a><strong>1.2获取cid</strong><br></h2><p>从b站的api”<a href="https://api.bilibili.com/x/player/pagelist?bvid=BV1C7411k7D3&amp;jsonp=jsonp&quot;获得cid" target="_blank" rel="noopener">https://api.bilibili.com/x/player/pagelist?bvid=BV1C7411k7D3&amp;jsonp=jsonp&quot;获得cid</a><br><br>‘bvid=’后面加上获得的bvid就可以了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getcid</span><span class="params">(name, bvid, referer, dirpath)</span>:</span></span><br><span class="line">    Host = <span class="string">'api.bilibili.com'</span></span><br><span class="line">    url = <span class="string">'https://api.bilibili.com/x/player/pagelist?'</span>+<span class="string">'bvid='</span> + bvid +<span class="string">'&amp;jsonp=jsonp'</span></span><br><span class="line">    path = getHTML.get(url=url, name=name, dirpath=dirpath, referer=referer, Host=Host, suffix=<span class="string">'txt'</span>)</span><br><span class="line">    <span class="keyword">return</span> path</span><br></pre></td></tr></table></figure>
<p>getHTML是我自己写的用于爬取的函数，因为要经过不止一次爬取<br><br>内容是：(这才是真正意义上的爬取)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> savefile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url, name, dirpath=None, referer=None, Host=None, suffix=None)</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">'text/html, application/xhtml+xml, application/xml; q=0.9, */*; q=0.8'</span>,</span><br><span class="line">    <span class="string">'Accept-Language'</span>: <span class="string">'zh-Hans-CN, zh-Hans; q=0.5'</span>,</span><br><span class="line">    <span class="string">'DNT'</span>: <span class="string">'1'</span>,</span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'search.bilibili.com'</span>,</span><br><span class="line">    <span class="string">'Origin'</span>: <span class="string">'https://www.bilibili.com'</span>,</span><br><span class="line">    <span class="string">'Upgrade-Insecure-Requests'</span>: <span class="string">'1'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'写上自己的useragent，一个网页右键检查元素，network网络里随便点一个包request headers请求头里'</span>,</span><br><span class="line"></span><br><span class="line">    &#125;<span class="comment"># 刚开始尝试的时候headers写的少，被b站大大封了几次ip，还好b站大大仁慈，cookie可以不加，如果是浏览器无痕模式一般是不会将cookie加入头的，加上'DNT':1</span></span><br><span class="line">    <span class="keyword">if</span> referer != <span class="literal">None</span>:</span><br><span class="line">        headers[<span class="string">'referer'</span>] = referer</span><br><span class="line">    <span class="keyword">if</span> Host != <span class="literal">None</span>:</span><br><span class="line">        headers[<span class="string">'Host'</span>] = Host</span><br><span class="line">    req = request.Request(url, headers=headers)</span><br><span class="line">    print(<span class="string">'开始抓取'</span>)</span><br><span class="line">    response = request.urlopen(req)</span><br><span class="line">    print(<span class="string">'抓取&#123;&#125;成功!'</span>.format(url))</span><br><span class="line">    html = response.read()</span><br><span class="line">    html = html.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    path = savefile.save(name=name, dirpath=dirpath, content=html,suffix=suffix )</span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br></pre></td></tr></table></figure>
<p>获取的cid数据是json格式的<br><br>用json模块读取，可以进行一系列字典、列表操作。<br><img src="/2020/04/28/%E7%88%AC%E8%99%AB%E4%B8%8B%E8%BD%BDb%E7%AB%99%E8%A7%86%E9%A2%91/cid.png" alt><br>如果直接用瞅json文本结构简单还好，结构复杂能瞅瞎眼。我用vscode里的json tool插件，安装并重启后按ctrl + alt + m即可进行结构化展示，注意格式化前不要选中（就是浏览时用光标一直按住左键选取，文字地下会出现阴影）任何文本，不然会失败。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(cid_file, mode=<span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f = json.load(f)</span><br></pre></td></tr></table></figure>
<p>如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'cid'</span>]</span><br></pre></td></tr></table></figure>
<p>值就是145508985。<br><strong>注意data这个键对应的值是个列表，列表里的元素又是很多个（这里只有一个）字典。</strong><br><br>有一些视频里不止有一个p，一个p对应一个cid。<br><br></p>
<h2 id="1-3获取视频url"><a href="#1-3获取视频url" class="headerlink" title="1.3获取视频url"></a><strong>1.3获取视频url</strong><br></h2><p>现在已经取得了视频的bvid,cid就能利用这两个参数从b站api<br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'https://api.bilibili.com/x/player/playurl?'</span> + <span class="string">'bvid='</span> + bvid +<span class="string">'&amp;cid='</span> + str(cid) + <span class="string">'&amp;qn=64&amp;type=&amp;otype=json'</span></span><br></pre></td></tr></table></figure>
<p>里获得url，qu=64是视频分辨率1080p，32是720p。<br><br>这里获取资源的时候headers里Host值换成 api.bilibili.com<br><br>referer值换成之前已经获取的referer，一般结构是：”<a href="http://www.bilibili.com/video/BV1C7411k7D3?from=search&quot;" target="_blank" rel="noopener">http://www.bilibili.com/video/BV1C7411k7D3?from=search&quot;</a>,<br><br>爬取后的文件格式依旧是json<br><br><img src="/2020/04/28/%E7%88%AC%E8%99%AB%E4%B8%8B%E8%BD%BDb%E7%AB%99%E8%A7%86%E9%A2%91/2.png" alt><br>要有耐心滴一层一层剥开（我愿一层一层一层一层剥开你的心~🎵）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(cid_file, mode=<span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f = json.load(f)</span><br><span class="line">    f[<span class="string">'data'</span>][<span class="string">'durl'</span>][<span class="number">0</span>][<span class="string">'url'</span>]<span class="comment"># 这个就是主要的那个url，backup是备份的意思。</span></span><br></pre></td></tr></table></figure>
<p>durl的值是个列表，如果是个多p视频，列表里的元素就会有好多个。<br></p>
<h2 id="1-4下载视频"><a href="#1-4下载视频" class="headerlink" title="1.4下载视频"></a><strong>1.4下载视频</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_video</span><span class="params">(url, referer, name, p_dir)</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'origin'</span>: <span class="string">'https://www.bilibili.com'</span>,</span><br><span class="line">        <span class="string">'referer'</span>: <span class="string">'还是之前那个referer'</span>,</span><br><span class="line">        <span class="string">'user-agent'</span>: <span class="string">'还是那个useragent'</span></span><br><span class="line">    &#125;</span><br><span class="line">    headers[<span class="string">'referer'</span>] = referer</span><br><span class="line"></span><br><span class="line">    r = requests.get(url, stream=<span class="literal">True</span>, headers=headers) <span class="comment"># 这里是下载 </span></span><br><span class="line"></span><br><span class="line">    length = float(r.headers[<span class="string">'content-length'</span>])</span><br><span class="line">    f = open(p_dir + <span class="string">'\\'</span> + <span class="string">'&#123;&#125;.&#123;&#125;'</span>.format(name, <span class="string">'flv'</span>), <span class="string">'wb'</span>)</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    count_tmp = <span class="number">0</span></span><br><span class="line">    time1 = time.time()</span><br><span class="line">    print(url)</span><br><span class="line">    print(<span class="string">'开始下载&#123;&#125;'</span>.format(url))</span><br><span class="line">    <span class="keyword">for</span> chunk <span class="keyword">in</span> r.iter_content(chunk_size=<span class="number">10240</span>):<span class="comment"># 这里开始是进行分块保存，并计时</span></span><br><span class="line">        <span class="keyword">if</span> chunk:</span><br><span class="line">            f.write(chunk)</span><br><span class="line">            count += len(chunk)</span><br><span class="line">            <span class="keyword">if</span> time.time() - time1 &gt; <span class="number">2</span>:</span><br><span class="line">                p = count / length * <span class="number">100</span></span><br><span class="line">                speed = (count - count_tmp) / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">2</span></span><br><span class="line">                count_tmp = count</span><br><span class="line">                print(name + <span class="string">': '</span> + <span class="string">'&#123;:.2f&#125;'</span>.format(p) + <span class="string">'%'</span> + <span class="string">' Speed: '</span> + <span class="string">'&#123;:.2f&#125;'</span>.format(speed) + <span class="string">'M/S'</span>)</span><br><span class="line">                time1 = time.time()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'&#123;&#125;保存失败！'</span>.format(name))</span><br><span class="line">    f.close()</span><br><span class="line">    print(<span class="string">"&#123;0&#125;.&#123;1&#125;保存成功！"</span>.format(name, <span class="string">'flv'</span>))</span><br></pre></td></tr></table></figure>
<p>以上部分就能实现从搜索到下载视频了<br><br></p>
<h1 id="2、其它函数"><a href="#2、其它函数" class="headerlink" title="2、其它函数"></a>2、其它函数</h1><h2 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h2><p>有些命名时给我自己看的，看不懂没关系，1.4以上已经都实现了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">import</span> getHTML</span><br><span class="line"><span class="keyword">import</span> creatdir</span><br><span class="line"><span class="keyword">import</span> getPATH</span><br><span class="line"><span class="keyword">import</span> getBvidUrlName</span><br><span class="line"><span class="keyword">import</span> printSelectList</span><br><span class="line"><span class="keyword">import</span> getCid</span><br><span class="line"><span class="keyword">import</span> getPlayurl</span><br><span class="line"><span class="keyword">import</span> download</span><br><span class="line"><span class="keyword">import</span> title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">title.content()</span><br><span class="line">d_path = getPATH.GetDesktopPath()</span><br><span class="line">name = input(<span class="string">'请输入你想下载的视频名称: '</span>)</span><br><span class="line">print(<span class="string">'桌面路径为：&#123;&#125;'</span>.format(d_path))</span><br><span class="line">path = input(<span class="string">'输入你想保存的文件夹的绝对位置（输入p跳过此步骤，默认路径为桌面）：'</span>)</span><br><span class="line"><span class="comment"># 编码</span></span><br><span class="line">parse_name = parse.quote(name)</span><br><span class="line">search_url = <span class="string">'https://search.bilibili.com/all?keyword='</span> + parse_name</span><br><span class="line"><span class="comment"># 创建根文件夹</span></span><br><span class="line"><span class="keyword">if</span> path != <span class="string">'p'</span>:</span><br><span class="line">    root_dir = creatdir.creat_a_dir(name, path)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    root_dir = creatdir.creat_a_dir(name, d_path)</span><br><span class="line"><span class="comment"># 获取HTML</span></span><br><span class="line">html_file = getHTML.get(url=search_url, name=name, dirpath=root_dir, suffix=<span class="string">'txt'</span>)</span><br><span class="line"><span class="comment"># 抽取符合条件的列单</span></span><br><span class="line">video_list = getBvidUrlName.getlist(html_file, name, root_dir=root_dir)</span><br><span class="line"><span class="comment"># 打印列单，让用户选择，获得选择视频的bvid，名字，和网址</span></span><br><span class="line">g_name, bvid, referer = printSelectList.select_list(video_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户选择视频的文件夹</span></span><br><span class="line">g_dir = creatdir.creat_a_dir(g_name, root_dir)</span><br><span class="line"><span class="comment"># 获得cid</span></span><br><span class="line">cid_file = getCid.getcid(g_name, bvid, referer, g_dir)</span><br><span class="line"><span class="comment"># 获取被选中的所有视频</span></span><br><span class="line">p_name_list, p_dir_list = getPlayurl.getURL(cid_file=cid_file, bvid=bvid, referer=referer, g_dir=g_dir)</span><br><span class="line"><span class="comment"># 下载视频</span></span><br><span class="line">download.get_video(g_dir=g_dir, p_name_list=p_name_list, p_dir_list=p_dir_list, referer=referer)</span><br></pre></td></tr></table></figure>
<p><br><br></p>
<h2 id="用来创建文件夹的函数creatdir-py"><a href="#用来创建文件夹的函数creatdir-py" class="headerlink" title="用来创建文件夹的函数creatdir.py"></a>用来创建文件夹的函数creatdir.py</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">creat_a_dir</span><span class="params">(sname, spath=<span class="string">r'C:\Users\PAN\Desktop'</span>)</span>:</span></span><br><span class="line">    <span class="string">'''创建位于spath的名为sname+当地时间的文件夹。默认在桌面，返回文件夹的目录'''</span></span><br><span class="line">    local_time = time.strftime(<span class="string">'%Y-%m-%d-%H-%M-%S'</span>,time.localtime())</span><br><span class="line">    dir_path = spath + <span class="string">'\\'</span> + sname + <span class="string">'-'</span> + local_time</span><br><span class="line">    os.mkdir(dir_path)</span><br><span class="line">    print(<span class="string">'创建 &#123;&#125; 成功！'</span>.format(dir_path))</span><br><span class="line">    <span class="keyword">return</span> dir_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a = creat_a_dir(<span class="string">'小甲鱼'</span>)</span><br><span class="line">    print(a)</span><br></pre></td></tr></table></figure>
<p><br><br></p>
<h2 id="用来保存文件的函数savefile-py"><a href="#用来保存文件的函数savefile-py" class="headerlink" title="用来保存文件的函数savefile.py"></a>用来保存文件的函数savefile.py</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(name, dirpath, content, suffix=None)</span>:</span></span><br><span class="line">    <span class="string">'''name 文件名字， dirpath 保存在的文件夹目录，content 保存内容, suffix 后缀'''</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> suffix == <span class="string">'json'</span>:</span><br><span class="line">        suffix = <span class="string">'.'</span> + suffix</span><br><span class="line">        path = dirpath + <span class="string">'\\'</span> + name + suffix</span><br><span class="line">        <span class="keyword">with</span> open(path, mode=<span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f0:</span><br><span class="line">            json.dump(content, f0)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        suffix = <span class="string">'.'</span> + <span class="string">'txt'</span></span><br><span class="line">        path = dirpath + <span class="string">'\\'</span> + name + suffix</span><br><span class="line">        <span class="keyword">with</span> open(path, mode=<span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f1:</span><br><span class="line">            f1.write(content)</span><br><span class="line">    print(<span class="string">'保存 &#123;&#125; 成功！'</span>.format(path))</span><br><span class="line">    <span class="keyword">return</span> path</span><br></pre></td></tr></table></figure>
<p>其实json是一种带格式的文本文件。保存成txt格式，用json格式化读取，结果是一样的。<br><br>我折腾来折腾去算明白了，只要是文本，统一保存txt就没错，文本的内容格式不用导来导去。关键在于编码要搞清楚。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>很清楚，有很多地方可以改进。<br>如果有时间的话会继续做。<br>优秀的程序，也要有优秀的异常处理，我这里并没有搞什么异常处理。程序可执行，但是比较脆弱。</p>
]]></content>
      <categories>
        <category>实战</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>【pthon爬虫】豆瓣评论全爬取</title>
    <url>/2020/04/20/%E3%80%90pthon%E7%88%AC%E8%99%AB%E3%80%91%E8%B1%86%E7%93%A3%E8%AF%84%E8%AE%BA%E5%85%A8%E7%88%AC%E5%8F%96/</url>
    <content><![CDATA[<p>@<a href="目录">TOC</a></p>
<h1 id="用到的库"><a href="#用到的库" class="headerlink" title="用到的库"></a>用到的库</h1><p>urllib<br>time<br>re<br>os</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>直接爬网页只能获得短评，通过抓包，我发现有豆瓣有个专门储存评论的包叫full。抓下来就好了。用urllib里的request和直接用requests都一样。<br><br><br><br>一句话，爬的好不如藏得好。<br>藏得好不如用的好。</p>
<h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.mkdir(<span class="string">r'C:\Users\***\Desktop\PYhomework\c800'</span>)</span><br><span class="line">search_counts = <span class="number">800</span></span><br><span class="line">url = <span class="string">'https://movie.douban.com/subject/2353023/reviews'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'text/html, application/xhtml+xml, application/xml; q=0.9, */*; q=0.8'</span>,</span><br><span class="line">        <span class="string">'Accept-Language'</span>: <span class="string">'zh-Hans-CN, zh-Hans; q=0.5'</span>,</span><br><span class="line">        <span class="string">'Connection'</span>: <span class="string">'Keep-Alive'</span>,</span><br><span class="line">        <span class="string">'Upgrade-Insecure-Requests'</span>: <span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.18363'</span>&#125;</span><br><span class="line">headers[<span class="string">'Referer'</span>] = <span class="string">'https://movie.douban.com/subject/2353023/'</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">lists = []</span><br><span class="line"><span class="keyword">for</span> count <span class="keyword">in</span> range(<span class="number">0</span>, search_counts, <span class="number">20</span>):</span><br><span class="line">    url = url + <span class="string">"?start="</span> + str(count)</span><br><span class="line">    req = request.Request(url, headers=headers)</span><br><span class="line">    response = request.urlopen(req)</span><br><span class="line">    HTML = response.read()</span><br><span class="line">    HTML = HTML.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">    pattern = re.compile(<span class="string">"&lt;div data-cid=\"(.*)\"&gt;"</span>)</span><br><span class="line">    lists = pattern.findall(HTML) + lists</span><br><span class="line">    <span class="string">'''爬取实际评论'''</span></span><br><span class="line"></span><br><span class="line">headers[<span class="string">'Host'</span>] = <span class="string">'movie.douban.com'</span></span><br><span class="line">headers[<span class="string">'Sec-Fetch-Dest'</span>] = <span class="string">'document'</span></span><br><span class="line">headers[<span class="string">'Sec-Fetch-Mode'</span>] = <span class="string">'navigate'</span></span><br><span class="line">headers[<span class="string">'Sec-Fetch-Site'</span>] = <span class="string">'none'</span></span><br><span class="line">headers[<span class="string">'Sec-Fetch-User'</span>] = <span class="string">'?1'</span></span><br><span class="line">headers[<span class="string">'Upgrade-Insecure-Requests'</span>] = <span class="string">'1'</span></span><br><span class="line">print(<span class="string">'爬取成功！'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> id <span class="keyword">in</span> lists:</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    url = <span class="string">'https://movie.douban.com/j/review/'</span> + id + <span class="string">'/full'</span></span><br><span class="line">    req = request.Request(url, headers=headers)</span><br><span class="line">    response = request.urlopen(req)</span><br><span class="line">    comment = response.read()</span><br><span class="line">    comment = comment.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">r"C:\Users\***\Desktop\PYhomework\c800\comment%d.txt"</span> % i, mode=<span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> c:</span><br><span class="line">        c.write(comment)</span><br><span class="line">        print(<span class="string">"comment%d保存成功！"</span> % i)</span><br><span class="line">    time.sleep(<span class="number">0</span>)  <span class="comment"># 随缘设置</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"抓取完成！"</span>)</span><br></pre></td></tr></table></figure>
<p>爬不成功就把自己浏览器的header换上，加上自己的cookie。<br>路径换成自己的。</p>
<h1 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h1><p>爬完不洗，脏死你。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">os.mkdir(<span class="string">"c800ok"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">801</span>):</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">r"C:\Users\***\Desktop\PYhomework\c800\comment%d.txt"</span> % i, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f = f.read()</span><br><span class="line">        start = f.find(<span class="string">",\"html\":\""</span>)</span><br><span class="line">        end = f.find(<span class="string">'\"&#125;'</span>)</span><br><span class="line">        strings = f[start+<span class="number">9</span>: end]</span><br><span class="line">        strings = re.sub(<span class="string">'&lt;br&gt;'</span>, <span class="string">'\n'</span>, strings)</span><br><span class="line">        <span class="comment"># 我这里就是手贱练练正则替换</span></span><br><span class="line">        strings = strings.replace(<span class="string">'\\t'</span>, <span class="string">'\n'</span>)</span><br><span class="line">        strings = strings.replace(<span class="string">'&amp;nbsp;'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">r'C:\Users\***\Desktop\PYhomework\c800ok\clear_comment%d.txt'</span> % i, mode=<span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> fs:</span><br><span class="line">            fs.write(strings)</span><br><span class="line">            print(<span class="string">'写入成功！'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python实战</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>python format()函数</title>
    <url>/2020/04/23/%E3%80%90Python%E3%80%91format()%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA---%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="一、旧式-格式化输出"><a href="#一、旧式-格式化输出" class="headerlink" title="一、旧式 % 格式化输出"></a>一、旧式 % 格式化输出</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">"a"</span></span><br><span class="line">print(<span class="string">"这是一个字符%c"</span> % a)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<table>
<thead>
<tr>
<th>格式</th>
<th>输出方式</th>
</tr>
</thead>
<tbody><tr>
<td>%c</td>
<td>单字符</td>
</tr>
<tr>
<td>%s</td>
<td>字符串</td>
</tr>
<tr>
<td>%d</td>
<td>十进制</td>
</tr>
<tr>
<td>%f</td>
<td>浮点型</td>
</tr>
</tbody></table>
<p><strong>多个输出</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">"a"</span></span><br><span class="line">b = <span class="string">"string"</span></span><br><span class="line">print(<span class="string">"这是一个字符%c和 一段字符串%s"</span> % (a, b))</span><br></pre></td></tr></table></figure>
<p><strong>保留小数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">520.1314666</span></span><br><span class="line">print(<span class="string">"保留四位小数%.4f"</span> % a)</span><br></pre></td></tr></table></figure>
<h1 id="二、format格式化输出"><a href="#二、format格式化输出" class="headerlink" title="二、format格式化输出"></a>二、format格式化输出</h1><h2 id="定位输出"><a href="#定位输出" class="headerlink" title="定位输出"></a>定位输出</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">first = <span class="string">"人生苦短"</span></span><br><span class="line">second = <span class="string">"我始终在你身边"</span></span><br><span class="line">print(<span class="string">"虽然&#123;&#125;,但是&#123;&#125;"</span>.format(first, second))</span><br><span class="line"></span><br><span class="line"><span class="meta">@ JYL</span></span><br></pre></td></tr></table></figure>
<p><strong>在{}中输入定位</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">first = <span class="string">"人生苦短"</span></span><br><span class="line">second = <span class="string">"我始终在你身边"</span></span><br><span class="line">print(<span class="string">"&#123;1&#125;,即使&#123;0&#125;"</span>.format(first, second)</span><br></pre></td></tr></table></figure>
<h2 id="“-”高级输出"><a href="#“-”高级输出" class="headerlink" title="“:”高级输出"></a>“:”高级输出</h2><p><strong>参数位置 : 输出方法</strong></p>
<h3 id="1、数的格式"><a href="#1、数的格式" class="headerlink" title="1、数的格式"></a>1、数的格式</h3><p>保留小数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">first = <span class="number">520.13146666</span></span><br><span class="line">second = <span class="number">1</span></span><br><span class="line">print(<span class="string">"我想对你说&#123;0:.4f&#125;"</span>.format(first))<span class="comment"># 冒号前的0可以省略，保留四位小数</span></span><br><span class="line">print(<span class="string">"我&#123;:.0%&#125;爱你"</span>.format(second))<span class="comment"># %输出</span></span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我想对你说520.1315</span><br><span class="line">我100%爱你</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>格式</th>
<th>输出</th>
</tr>
</thead>
<tbody><tr>
<td>{:b}</td>
<td>二进制</td>
</tr>
<tr>
<td>d</td>
<td>十进制</td>
</tr>
<tr>
<td>o</td>
<td>八进制</td>
</tr>
<tr>
<td>x</td>
<td>十六进制</td>
</tr>
<tr>
<td>%</td>
<td>百分制，如数值1会被输出位100%</td>
</tr>
<tr>
<td>,</td>
<td>千分号，如100，000￥</td>
</tr>
<tr>
<td>e</td>
<td>带幂（e）符号输出</td>
</tr>
<tr>
<td>g</td>
<td>一般格式，数字以fixed-point进行输出,当数值特别大的时候，用幂形式打印</td>
</tr>
<tr>
<td>n</td>
<td>数字，当值为整数时和”d”相同，值为浮点数是和”g”相同，不同的是他会根据区域设置插入数字分隔符。</td>
</tr>
<tr>
<td><strong>对数据本身进行操作</strong></td>
<td></td>
</tr>
<tr>
<td><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">number = <span class="number">520.1314666</span></span><br><span class="line">a = format(number,<span class="string">".4f"</span>)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></td>
<td></td>
</tr>
<tr>
<td>输出结果</td>
<td></td>
</tr>
<tr>
<td><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">520.1315 # 注意为str类型</span><br></pre></td></tr></table></figure></td>
<td></td>
</tr>
<tr>
<td>### 2、对齐</td>
<td></td>
</tr>
<tr>
<td><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">first = <span class="string">"我爱你"</span></span><br><span class="line">print(<span class="string">"我想对你说&#123;:&gt;20&#125;"</span>.format(first))</span><br></pre></td></tr></table></figure></td>
<td></td>
</tr>
<tr>
<td>“&gt;”号表示右对齐，20表示<strong>总</strong>输出长度是20字符（含空）</td>
<td></td>
</tr>
<tr>
<td>输出结果</td>
<td></td>
</tr>
<tr>
<td><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我想对你说                 我爱你</span><br></pre></td></tr></table></figure></td>
<td></td>
</tr>
<tr>
<td>格式</td>
<td>对齐方式</td>
</tr>
<tr>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>&lt;</td>
<td>左（默认）</td>
</tr>
<tr>
<td>&gt;</td>
<td>右</td>
</tr>
<tr>
<td>^</td>
<td>居中（偶数偏左）</td>
</tr>
<tr>
<td><strong>自定义填充</strong></td>
<td></td>
</tr>
<tr>
<td><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">first = <span class="string">"我爱你"</span></span><br><span class="line">print(<span class="string">"&#123;:a^20&#125;"</span>.format(first))</span><br></pre></td></tr></table></figure></td>
<td></td>
</tr>
<tr>
<td>输出为：</td>
<td></td>
</tr>
<tr>
<td><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aaaaaaaa我爱你aaaaaaaaa</span><br></pre></td></tr></table></figure></td>
<td></td>
</tr>
<tr>
<td>自定义化：</td>
<td></td>
</tr>
<tr>
<td><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">first = <span class="string">"我爱你"</span></span><br><span class="line">second = <span class="string">"*"</span></span><br><span class="line">print(<span class="string">"&#123;0:&#123;1&#125;^20&#125;"</span>.format(first, second))</span><br></pre></td></tr></table></figure></td>
<td></td>
</tr>
<tr>
<td>输出为：</td>
<td></td>
</tr>
<tr>
<td><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">********我爱你*********</span><br></pre></td></tr></table></figure></td>
<td></td>
</tr>
<tr>
<td># 三、向函数中传入序列（除了元组？）</td>
<td></td>
</tr>
<tr>
<td>用[]来访问值</td>
<td></td>
</tr>
<tr>
<td><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="string">"我爱你"</span>, <span class="string">"一生一世"</span>, <span class="string">"不离不弃"</span>, <span class="string">"永不分离"</span>]</span><br><span class="line">print(<span class="string">"&#123;[0]&#125;"</span>.format(list))</span><br><span class="line"><span class="comment"># 元组会报错</span></span><br><span class="line">list2 = <span class="number">520.1314666</span>, <span class="number">775.852166</span></span><br><span class="line">print(<span class="string">"因为&#123;[0]&#125;, 所以&#123;[1]&#125;"</span>.format(list2))</span><br></pre></td></tr></table></figure></td>
<td></td>
</tr>
<tr>
<td>也可以访问修改键值</td>
<td></td>
</tr>
<tr>
<td><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict = &#123;<span class="string">"a"</span>: <span class="string">"我爱你"</span>, <span class="string">"b"</span>: <span class="string">"一生一世"</span>, <span class="string">"c"</span>: <span class="string">"不离不弃"</span>&#125;</span><br><span class="line">print(<span class="string">"因为&#123;0[a]&#125;, 所以&#123;0[c]&#125;"</span>.format(dict))</span><br></pre></td></tr></table></figure></td>
<td></td>
</tr>
<tr>
<td>输出为：</td>
<td></td>
</tr>
<tr>
<td><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">因为我爱你, 所以不离不弃</span><br></pre></td></tr></table></figure></td>
<td></td>
</tr>
<tr>
<td>可以看出 <strong>:号</strong>前定位参数 ，是定位后方format函数中传入对象的位置。</td>
<td></td>
</tr>
</tbody></table>
<p><strong>另一种方式，直接使用键</strong><br>对象前加 **</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict = &#123;<span class="string">"a"</span>: <span class="string">"我爱你"</span>, <span class="string">"b"</span>: <span class="string">"一生一世"</span>, <span class="string">"c"</span>: <span class="string">"不离不弃"</span>&#125;</span><br><span class="line">print(<span class="string">"因为&#123;a&#125;, 所以&#123;c&#125;"</span>.format(**dict))</span><br></pre></td></tr></table></figure>

<p><strong>END</strong></p>
]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python-format函数</tag>
      </tags>
  </entry>
  <entry>
    <title>matplotlib设置中文</title>
    <url>/2020/04/22/%E3%80%90Python%20%20matplotlib%E3%80%91%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB4%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%20%20~%20matplotlib%E8%AE%BE%E7%BD%AE%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%EF%BC%88pycharm%E8%AE%BE%E7%BD%AE%EF%BC%89%20~%20python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
    <content><![CDATA[<h1 id="总结网上方法，备忘"><a href="#总结网上方法，备忘" class="headerlink" title="总结网上方法，备忘"></a>总结网上方法，备忘</h1><p>@<a href="目录">TOC</a></p>
<h1 id="第①步-找到中文字tff文件或下载"><a href="#第①步-找到中文字tff文件或下载" class="headerlink" title="第①步  找到中文字tff文件或下载"></a>第①步  找到中文字tff文件或下载</h1><h2 id="微软自带tff字体"><a href="#微软自带tff字体" class="headerlink" title="微软自带tff字体"></a>微软自带tff字体</h2><p>1、控制面板—&gt;<br>2、外观和个性化—&gt;<br>3、字体—&gt;<br>4、复制.tff文件（复制你想添加进matplotlib里的）</p>
<h2 id="自己网上下载"><a href="#自己网上下载" class="headerlink" title="自己网上下载"></a>自己网上下载</h2><p>字由</p>
<h1 id="第②步-设置matplotlib"><a href="#第②步-设置matplotlib" class="headerlink" title="第②步  设置matplotlib"></a>第②步  设置matplotlib</h1><a id="more"></a>
<p>1、找到matplotlib包的位置,添加tff<br>右键你的python快捷方式，打开文件所在文件夹，如果打开后的文件夹里还是快捷方式继续右键打开文件所在文件夹。<br>依次点<br>Lib &gt; site-packages &gt; matplotlib &gt; mpl-data &gt; fonts &gt; tff<br>把刚复制的tff字体文件扔进去。并复制一下名字。<br>2、设置matplotlibrc<br>Lib &gt; site-packages &gt; matplotlib &gt; mpl-data<br>有一个matplotlibrc文件。<br>右键用记事本打开<br>找到(我的在记事本的248行和256行，版本定)<br>删除“#”号</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#font.family  : sans-serif</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#font.sans-serif : DejaVu Sans, Bitstream Vera Sans, ...</span></span><br></pre></td></tr></table></figure>
<p>并把刚复制的文件名字添加到第二个里面，我复制的是simsun</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">font.sans-serif :simsun, DejaVu Sans, Bitstream Vera Sans, ...</span><br><span class="line">别搞中文逗号！</span><br></pre></td></tr></table></figure>
<p>负号显示错误改（395行）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#axes.unicode_minus : True</span></span><br></pre></td></tr></table></figure>
<p>改为：前删除# 后改False</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">axes.unicode_minus : <span class="literal">False</span></span><br><span class="line">ctrl + s 保存</span><br></pre></td></tr></table></figure>
<p>3、重载<br>打开IDLE</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> _rebuild</span><br><span class="line">&gt;&gt;&gt;_rebuild</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<h2 id="PS-用pycharm的注意"><a href="#PS-用pycharm的注意" class="headerlink" title="PS:用pycharm的注意"></a>PS:用pycharm的注意</h2><p>用pycharm的，虚拟环境里的Lib也改一下吧（滑稽）<br>我是在新建项目时<br>点开    Project Interpreter：（项目解释者，欺负我看不懂英文让我好找）</p>
<p>选中  inherit global site-packages （继承全局包）</p>
<p>END!</p>
]]></content>
      <categories>
        <category>matploylib库</category>
      </categories>
      <tags>
        <tag>matplotlib, 设置</tag>
      </tags>
  </entry>
  <entry>
    <title>少年中国说</title>
    <url>/2020/04/22/%E5%B0%91%E5%B9%B4%E4%B8%AD%E5%9B%BD%E8%AF%B4/</url>
    <content><![CDATA[<h1 id="用来测试显示效果"><a href="#用来测试显示效果" class="headerlink" title="用来测试显示效果"></a>用来测试显示效果</h1><p>《少年中国说》 梁启超</p>
<a id="more"></a>
<center>《少年中国说》<center>
<center>梁启超<center>
<br>
<center>
使举国之少年而果为少年也，则吾中国为未来之国，其进步未可量也。<br>
使举国之少年而亦为老大也，则吾中国为过去之国，其澌亡可翘足而待也。<br>
故今日之责任，不在他人，而全在我少年。
<br>少年智则国智，少年富则国富；<br>少年强则国强，少年独立则国独立；<br>少年自由则国自由；少年进步则国进步；<br>少年胜于欧洲，则国胜于欧洲；<br>少年雄于地球，则国雄于地球。<br>红日初升，其道大光。<br>河出伏流，一泻汪洋。<br>潜龙腾渊，鳞爪飞扬。<br>乳虎啸谷，百兽震惶。<br>鹰隼试翼，风尘翕张。<br>奇花初胎，矞矞皇皇。<br>干将发硎，有作其芒。<br>天戴其苍，地履其黄。<br>纵有千古，横有八荒。<br>前途似海，来日方长。<br>美哉我少年中国，与天不老！<br>壮哉我中国少年，与国无疆！<center>
</center></center></center></center></center></center>]]></content>
  </entry>
</search>
